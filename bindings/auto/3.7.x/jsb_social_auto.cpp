// clang-format off

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

/****************************************************************************
 Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 of the Software, and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
****************************************************************************/

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable : 4101)
#endif


#define SWIG_STD_MOVE(OBJ) std::move(OBJ)


#include <stdio.h>


#include "bindings/jswrapper/SeApi.h"
#include "bindings/manual/jsb_conversions.h"
#include "bindings/manual/jsb_global.h"


#include "bindings/auto/3.7.x/jsb_social_auto.h"
// Add more includes in the generated source file bellow
// ...



se::Class* __jsb_wrapper_social_NativeShare_class = nullptr;
se::Object* __jsb_wrapper_social_NativeShare_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_wrapper_social_NativeShare) 

static bool js_new_wrapper_social_NativeShare(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    wrapper::social::NativeShare *result;
    result = (wrapper::social::NativeShare *)new wrapper::social::NativeShare();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_wrapper_social_NativeShare, __jsb_wrapper_social_NativeShare_class, js_delete_wrapper_social_NativeShare)

static bool js_delete_wrapper_social_NativeShare(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_wrapper_social_NativeShare) 

static bool js_wrapper_social_NativeShare_shareImage(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::NativeShare *arg1 = (wrapper::social::NativeShare *) NULL ;
    wrapper::social::AuthMethod arg2 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if(argc != 4) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 4);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::NativeShare>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg4 = &temp4;
    
    
    ok &= sevalue_to_native(args[3], &temp5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg5 = &temp5;
    
    (arg1)->shareImage(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    
    
    return true;
}
SE_BIND_FUNCwrapper_social_NativeShare_shareImage) 

static bool js_wrapper_social_NativeShare_shareLink(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::NativeShare *arg1 = (wrapper::social::NativeShare *) NULL ;
    wrapper::social::AuthMethod arg2 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if(argc != 3) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 3);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::NativeShare>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg4 = &temp4;
    
    (arg1)->shareLink(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_NativeShare_shareLink) 

static bool js_wrapper_social_NativeShare_updateAsync(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::NativeShare *arg1 = (wrapper::social::NativeShare *) NULL ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if(argc != 4) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 4);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::NativeShare>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    
    ok &= sevalue_to_native(args[2], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg4 = &temp4;
    
    
    ok &= sevalue_to_native(args[3], &temp5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg5 = &temp5;
    
    (arg1)->updateAsync((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_NativeShare_updateAsync) 

static bool js_wrapper_social_NativeShare_inviteAsync(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::NativeShare *arg1 = (wrapper::social::NativeShare *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::NativeShare>(s);
    if (nullptr == arg1) return true;
    (arg1)->inviteAsync();
    
    
    return true;
}
SE_BIND_FUNC(jswrapper_social_NativeShare_inviteAsync) 

static bool jswrapper_social_NativeShare_chooseContext(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
wrapper::social::NativeShare *arg1 = wrapper::social::NativeShare *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECTwrapper::social::NativeShare>(s);
    if (nullptr == arg1) return true;
    (arg1)->chooseContext();
    
    
    return true;
}
SE_BIND_FUNC(jswrapper_social_NativeShare_chooseContext) 

static bool jswrapper_social_NativeShare_createContext(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
wrapper::social::NativeShare *arg1 = wrapper::social::NativeShare *) NULL ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECTwrapper::social::NativeShare>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    (arg1)->createContext((std::string const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_NativeShare_createContext) 

static bool js_wrapper_social_NativeShare_switchContext(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::NativeShare *arg1 = (wrapper::social::NativeShare *) NULL ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::NativeShare>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    (arg1)->switchContext((std::string const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_NativeShare_switchContext) 

static bool js_wrapper_social_NativeShare_getEntryPointData(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::NativeShare *arg1 = (wrapper::social::NativeShare *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::NativeShare>(s);
    if (nullptr == arg1) return true;
    (arg1)->getEntryPointData();
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_NativeShare_getEntryPointData) 

bool js_register_wrapper_social_NativeShare(se::Object* obj) {
    auto* cls = se::Class::create("NativeShare", obj, nullptr, _SE(js_new_wrapper_social_NativeShare)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("shareImage", _SE(js_wrapper_social_NativeShare_shareImage)); 
    cls->defineFunction("shareLink", _SE(js_wrapper_social_NativeShare_shareLink)); 
    cls->defineFunction("updateAsync", _SE(js_wrapper_social_NativeShare_updateAsync)); 
    cls->defineFunction("inviteAsync", _SE(js_wrapper_social_NativeShare_inviteAsync)); 
    cls->defineFunction("chooseContext", _SE(js_wrapper_social_NativeShare_chooseContext)); 
    cls->defineFunction("createContext", _SE(js_wrapper_social_NativeShare_createContext)); 
    cls->defineFunction("switchContext", _SE(js_wrapper_social_NativeShare_switchContext)); 
    cls->defineFunction("getEntryPointData", _SE(js_wrapper_social_NativeShare_getEntryPointData)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_wrapper_social_NativeShare));
    
    
    cls->install();
    JSBClassType::registerClass<wrapper::social::NativeShare>(cls);
    
    __jsb_wrapper_social_NativeShare_proto = cls->getProto();
    __jsb_wrapper_social_NativeShare_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_wrapper_social_TournamentController_class = nullptr;
se::Object* __jsb_wrapper_social_TournamentController_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_wrapper_social_TournamentController) 

static bool js_new_wrapper_social_TournamentController(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    wrapper::social::TournamentController *result;
    result = (wrapper::social::TournamentController *)new wrapper::social::TournamentController();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_wrapper_social_TournamentController, __jsb_wrapper_social_TournamentController_class, js_delete_wrapper_social_TournamentController)

static bool js_delete_wrapper_social_TournamentController(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_wrapper_social_TournamentController) 

static bool js_wrapper_social_TournamentController_createTournament(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::TournamentController *arg1 = (wrapper::social::TournamentController *) NULL ;
    int arg2 ;
    std::string *arg3 = 0 ;
    int arg4 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    std::string *arg8 = 0 ;
    std::string temp3 ;
    std::string temp5 ;
    std::string temp6 ;
    std::string temp7 ;
    std::string temp8 ;
    
    if(argc != 7) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 7);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::TournamentController>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    
    ok &= sevalue_to_native(args[2], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[3], &temp5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg5 = &temp5;
    
    
    ok &= sevalue_to_native(args[4], &temp6, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg6 = &temp6;
    
    
    ok &= sevalue_to_native(args[5], &temp7, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg7 = &temp7;
    
    
    ok &= sevalue_to_native(args[6], &temp8, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg8 = &temp8;
    
    (arg1)->createTournament(arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8);
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_TournamentController_createTournament) 

static bool js_wrapper_social_TournamentController_shareTournament(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::TournamentController *arg1 = (wrapper::social::TournamentController *) NULL ;
    int arg2 ;
    std::string *arg3 = 0 ;
    std::string temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::TournamentController>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    (arg1)->shareTournament(arg2,(std::string const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_TournamentController_shareTournament) 

static bool js_wrapper_social_TournamentController_postTournamentScore(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::TournamentController *arg1 = (wrapper::social::TournamentController *) NULL ;
    int arg2 ;
    std::string *arg3 = 0 ;
    std::string temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::TournamentController>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    (arg1)->postTournamentScore(arg2,(std::string const &)*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_TournamentController_postTournamentScore) 

static bool js_wrapper_social_TournamentController_getTournament(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::TournamentController *arg1 = (wrapper::social::TournamentController *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::TournamentController>(s);
    if (nullptr == arg1) return true;
    (arg1)->getTournament();
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_TournamentController_getTournament) 

static bool js_wrapper_social_TournamentController_getTournaments(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    wrapper::social::TournamentController *arg1 = (wrapper::social::TournamentController *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<wrapper::social::TournamentController>(s);
    if (nullptr == arg1) return true;
    (arg1)->getTournaments();
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_TournamentController_getTournaments) 

bool js_register_wrapper_social_TournamentController(se::Object* obj) {
    auto* cls = se::Class::create("TournamentController", obj, nullptr, _SE(js_new_wrapper_social_TournamentController)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("createTournament", _SE(js_wrapper_social_TournamentController_createTournament)); 
    cls->defineFunction("shareTournament", _SE(js_wrapper_social_TournamentController_shareTournament)); 
    cls->defineFunction("postTournamentScore", _SE(js_wrapper_social_TournamentController_postTournamentScore)); 
    cls->defineFunction("getTournament", _SE(js_wrapper_social_TournamentController_getTournament)); 
    cls->defineFunction("getTournaments", _SE(js_wrapper_social_TournamentController_getTournaments)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_wrapper_social_TournamentController));
    
    
    cls->install();
    JSBClassType::registerClass<wrapper::social::TournamentController>(cls);
    
    __jsb_wrapper_social_TournamentController_proto = cls->getProto();
    __jsb_wrapper_social_TournamentController_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_wrapper_social_ScheduledNotification_class = nullptr;
se::Object* __jsb_wrapper_social_ScheduledNotification_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_wrapper_social_ScheduledNotification) 

static bool js_wrapper_social_ScheduledNotification_requestGranted_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    bool result;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    result = (bool)wrapper::social::ScheduledNotification::requestGranted();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_ScheduledNotification_requestGranted_static) 

static bool js_wrapper_social_ScheduledNotification_requestAuth_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    wrapper::social::ScheduledNotification::requestAuth();
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_ScheduledNotification_requestAuth_static) 

static bool js_wrapper_social_ScheduledNotification_show_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    int arg6 ;
    int arg7 ;
    bool arg8 ;
    std::string *arg9 = 0 ;
    bool arg10 ;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp9 ;
    
    if(argc != 10) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 10);
        return false;
    }
    
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[2], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    
    ok &= sevalue_to_native(args[3], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg4 = &temp4;
    
    
    ok &= sevalue_to_native(args[4], &temp5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg5 = &temp5;
    
    
    ok &= sevalue_to_native(args[5], &arg6, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[6], &arg7, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[7], &arg8);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[8], &temp9, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg9 = &temp9;
    
    
    ok &= sevalue_to_native(args[9], &arg10);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    wrapper::social::ScheduledNotification::show(arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7,arg8,(std::string const &)*arg9,arg10);
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_ScheduledNotification_show_static) 

static bool js_wrapper_social_ScheduledNotification_cancel_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    int arg1 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    int arg5 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp6 ;
    std::string temp7 ;
    
    if(argc != 7) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 7);
        return false;
    }
    
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[2], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    
    ok &= sevalue_to_native(args[3], &temp4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg4 = &temp4;
    
    
    ok &= sevalue_to_native(args[4], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[5], &temp6, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg6 = &temp6;
    
    
    ok &= sevalue_to_native(args[6], &temp7, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg7 = &temp7;
    
    wrapper::social::ScheduledNotification::cancel(arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,(std::string const &)*arg7);
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_ScheduledNotification_cancel_static) 

static bool js_wrapper_social_ScheduledNotification_cancelAll_static(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    wrapper::social::ScheduledNotification::cancelAll();
    
    
    return true;
}
SE_BIND_FUNC(js_wrapper_social_ScheduledNotification_cancelAll_static) 

static bool js_new_wrapper_social_ScheduledNotification(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    wrapper::social::ScheduledNotification *result;
    result = (wrapper::social::ScheduledNotification *)new wrapper::social::ScheduledNotification();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_wrapper_social_ScheduledNotification, __jsb_wrapper_social_ScheduledNotification_class, js_delete_wrapper_social_ScheduledNotification)

static bool js_delete_wrapper_social_ScheduledNotification(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_wrapper_social_ScheduledNotification) 

bool js_register_wrapper_social_ScheduledNotification(se::Object* obj) {
    auto* cls = se::Class::create("ScheduledNotification", obj, nullptr, _SE(js_new_wrapper_social_ScheduledNotification)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    
    
    cls->defineStaticFunction("requestGranted", _SE(js_wrapper_social_ScheduledNotification_requestGranted_static)); 
    cls->defineStaticFunction("requestAuth", _SE(js_wrapper_social_ScheduledNotification_requestAuth_static)); 
    cls->defineStaticFunction("show", _SE(js_wrapper_social_ScheduledNotification_show_static)); 
    cls->defineStaticFunction("cancel", _SE(js_wrapper_social_ScheduledNotification_cancel_static)); 
    cls->defineStaticFunction("cancelAll", _SE(js_wrapper_social_ScheduledNotification_cancelAll_static)); 
    
    
    cls->defineFinalizeFunction(_SE(js_delete_wrapper_social_ScheduledNotification));
    
    
    cls->install();
    JSBClassType::registerClass<wrapper::social::ScheduledNotification>(cls);
    
    __jsb_wrapper_social_ScheduledNotification_proto = cls->getProto();
    __jsb_wrapper_social_ScheduledNotification_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}




bool register_all_social(se::Object* obj) {
    // Get the ns
    se::Value nsVal;
    if (!obj->getProperty("social", &nsVal, true))
    {
        se::HandleObject jsobj(se::Object::createPlainObject());
        nsVal.setObject(jsobj);
        obj->setProperty("social", nsVal);
    }
    se::Object* ns = nsVal.toObject();
    /* Register classes */
    js_register_wrapper_social_NativeShare(ns); 
    js_register_wrapper_social_TournamentController(ns); 
    js_register_wrapper_social_ScheduledNotification(ns); 
    
    /* Register global variables & global functions */
    
    
    
    return true;
}


#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif
// clang-format on
